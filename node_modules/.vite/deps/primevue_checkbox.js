import {
  ObjectUtils
} from "./chunk-3EIJWYNM.js";
import "./chunk-FGHZAEIK.js";
import {
  createBaseVNode,
  createElementBlock,
  mergeProps,
  openBlock
} from "./chunk-QTOSLENL.js";
import {
  normalizeClass,
  normalizeStyle
} from "./chunk-EGF7HRYP.js";
import "./chunk-KTZKXPFA.js";

// node_modules/primevue/checkbox/checkbox.esm.js
var script = {
  name: "Checkbox",
  inheritAttrs: false,
  emits: ["click", "update:modelValue", "change", "input"],
  props: {
    value: null,
    modelValue: null,
    binary: Boolean,
    class: null,
    style: null,
    trueValue: {
      type: null,
      default: true
    },
    falseValue: {
      type: null,
      default: false
    }
  },
  data() {
    return {
      focused: false
    };
  },
  methods: {
    onClick(event) {
      if (!this.$attrs.disabled) {
        let newModelValue;
        if (this.binary) {
          newModelValue = this.checked ? this.falseValue : this.trueValue;
        } else {
          if (this.checked)
            newModelValue = this.modelValue.filter((val) => !ObjectUtils.equals(val, this.value));
          else
            newModelValue = this.modelValue ? [...this.modelValue, this.value] : [this.value];
        }
        this.$emit("click", event);
        this.$emit("update:modelValue", newModelValue);
        this.$emit("change", event);
        this.$emit("input", newModelValue);
        this.$refs.input.focus();
      }
    },
    onFocus() {
      this.focused = true;
    },
    onBlur() {
      this.focused = false;
    }
  },
  computed: {
    checked() {
      return this.binary ? this.modelValue === this.trueValue : ObjectUtils.contains(this.value, this.modelValue);
    },
    containerClass() {
      return ["p-checkbox p-component", this.class, { "p-checkbox-checked": this.checked, "p-checkbox-disabled": this.$attrs.disabled, "p-checkbox-focused": this.focused }];
    }
  }
};
var _hoisted_1 = { class: "p-hidden-accessible" };
var _hoisted_2 = ["checked", "value"];
var _hoisted_3 = ["aria-checked"];
function render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", {
    class: normalizeClass($options.containerClass),
    onClick: _cache[2] || (_cache[2] = ($event) => $options.onClick($event)),
    style: normalizeStyle($props.style)
  }, [
    createBaseVNode("div", _hoisted_1, [
      createBaseVNode("input", mergeProps({
        ref: "input",
        type: "checkbox",
        checked: $options.checked,
        value: $props.value
      }, _ctx.$attrs, {
        onFocus: _cache[0] || (_cache[0] = (...args) => $options.onFocus && $options.onFocus(...args)),
        onBlur: _cache[1] || (_cache[1] = (...args) => $options.onBlur && $options.onBlur(...args))
      }), null, 16, _hoisted_2)
    ]),
    createBaseVNode("div", {
      ref: "box",
      class: normalizeClass(["p-checkbox-box", { "p-highlight": $options.checked, "p-disabled": _ctx.$attrs.disabled, "p-focus": $data.focused }]),
      role: "checkbox",
      "aria-checked": $options.checked
    }, [
      createBaseVNode("span", {
        class: normalizeClass(["p-checkbox-icon", { "pi pi-check": $options.checked }])
      }, null, 2)
    ], 10, _hoisted_3)
  ], 6);
}
script.render = render;

// dep:primevue_checkbox
var primevue_checkbox_default = script;
export {
  primevue_checkbox_default as default
};
//# sourceMappingURL=primevue_checkbox.js.map
